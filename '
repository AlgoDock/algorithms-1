/* https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.
*/

package leetcode

import "fmt"

func search2(nums []int, target int) bool {
	start, end := 0, len(nums)-1
	for start <= end {
		mid := start + (end-start)/2
		fmt.Println("target:", target, "...", start, mid, end, nums[mid], nums[mid] > target)
		switch {
		case target < nums[mid]:
			fmt.Println( nums[start] <= target)
			if nums[start] <= target && nums[start] <= nums[mid] {
				end = mid - 1
			} else {
				start = mid + 1
			}
		case nums[mid] < target:
			if target <= nums[end] && nums[mid] <= nums[end] {
				start = mid + 1
			} else {
				end = mid - 1
			}
		default:
			return true
		}
	}
	return false
}
